const bcrypt = require('bcryptjs');
const jwt = require("jsonwebtoken");
const crypto = require('crypto');
const algorithm = 'aes-256-cbc';


async function comparePassword(pas1,pas2){
    return await bcrypt.compare(pas1, pas2);
    
}
 
function encryptPassword(textPlain){
    const salt = bcrypt.genSaltSync(10);
    const hash = bcrypt.hashSync(textPlain, salt);
    return  hash;
}


const generateJWT = ( uid = '',email='',passwd='' ) => {

    return new Promise( (resolve, reject) => {
        const payload = { uid,email,passwd };
        jwt.sign( payload, process.env.SECRETORPRIVATEKEY, {
            expiresIn: '2h'
        }, ( err, token ) => {
            if ( err ) {                                
                reject( 'No se pudo generar el token' );
            } else {
                resolve( token );
            }
        })
    })
}

const verifyJWT = ( token = '' ) => {

    return new Promise( (resolve, reject) => {

        jwt.verify(token, process.env.SECRETORPRIVATEKEY, function(err, decoded) {
            if (err) {               
                reject( err.message  );
                return;
            }
            else {
                resolve(decoded);                
            }
        });
        
    });
}

const generateRandomString=(n) =>{
    let randomString           = '';
    let characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!"·$%&/()=¿¡^*Ç';

    for ( let i = 0; i < n; i++ ) {
      randomString += characters.charAt(Math.floor(Math.random()*characters.length));
   }
   return randomString;
}

function encryptData(randomText,password){
    try{
        const key_in_bytes = crypto.createHash('sha512').update(password,'utf-8').digest('hex').substring(0,32);
        const iv = crypto.randomBytes(16);
        const cipher = crypto.createCipheriv(algorithm, key_in_bytes, iv);
        let encrypted = cipher.update(randomText);
        encrypted = Buffer.concat([encrypted, cipher.final()]);
        return { 
            iv: iv.toString('hex'),
            encryptedData: encrypted.toString('hex') 
        };
    }catch(error){
        throw new Error(error.message)
    }
    
}


function decryptData(randomText,password) {
    try{
        const key_in_bytes = crypto.createHash('sha512').update(password,'utf-8').digest('hex').substring(0,32);
        let iv = Buffer.from(randomText.iv, 'hex');
        let encryptedText = Buffer.from(randomText.encryptedData, 'hex');
    
        let decipher = crypto.createDecipheriv(algorithm, Buffer.from(key_in_bytes), iv);
    
        let decrypted = decipher.update(encryptedText);
        decrypted = Buffer.concat([decrypted, decipher.final()]);
    
        return decrypted.toString();
    }catch(error){
        throw new Error(error.message)
    }
    
}

module.exports = {
    comparePassword, 
    encryptPassword,
    generateJWT,
    verifyJWT,
    generateRandomString,
    encryptData,
    decryptData
};